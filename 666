<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>AI Camera OCR</title>
  <style>
    body {
      margin: 0;
      overflow: hidden;
      font-family: Arial, sans-serif;
    }
    #camera-container {
      position: fixed;
      bottom: 20px;
      right: 20px;
      width: 80px;
      height: 80px;
      border-radius: 50%;
      background-color: red;
      display: flex;
      justify-content: center;
      align-items: center;
      color: white;
      font-size: 14px;
      font-weight: bold;
      cursor: pointer;
      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
      z-index: 9999;
    }
    #camera {
      position: fixed;
      bottom: 120px;
      right: 20px;
      width: 320px;
      height: 240px;
      border: 2px solid #ccc;
      border-radius: 10px;
      display: none;
      object-fit: cover;
      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
    }
    #status {
      position: fixed;
      bottom: 370px;
      right: 20px;
      font-size: 16px;
      font-weight: bold;
      background: #fff;
      padding: 10px;
      border-radius: 10px;
      display: none;
      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
    }
  </style>
</head>
<body>

  <!-- 小圆球按钮 -->
  <div id="camera-container">OFF</div>
  
  <!-- 摄像头画面 -->
  <video id="camera" autoplay playsinline></video>

  <!-- 状态显示 -->
  <div id="status">AI 正在处理...</div>

  <!-- 隐藏的Canvas -->
  <canvas id="capture-canvas" style="display:none;"></canvas>

  <script src="https://cdn.jsdelivr.net/npm/tesseract.js"></script>
  <script>
    const cameraContainer = document.getElementById('camera-container');
    const video = document.getElementById('camera');
    const statusDiv = document.getElementById('status');
    const canvas = document.getElementById('capture-canvas');
    const ctx = canvas.getContext('2d');

    let cameraOn = false;
    let captureInterval;

    // 初始化摄像头
    async function initCamera() {
      try {
        const stream = await navigator.mediaDevices.getUserMedia({
          video: { facingMode: 'environment' }, // 后置摄像头
        });
        video.srcObject = stream;
        console.log("摄像头已启动");
      } catch (error) {
        console.error('无法访问摄像头:', error);
        alert('无法访问摄像头，请检查权限设置。');
      }
    }

    // 捕捉帧并处理
    async function captureFrame() {
      canvas.width = video.videoWidth;
      canvas.height = video.videoHeight;
      ctx.drawImage(video, 0, 0, canvas.width, canvas.height);

      const imageDataURL = canvas.toDataURL('image/png');

      // OCR 识别
      Tesseract.recognize(imageDataURL, 'eng').then(({ data: { text } }) => {
        console.log('OCR识别结果:', text);
        sendToAI(text); // 发送到 AI 处理
      });
    }

    // 发送文字到 AI 并处理
    async function sendToAI(text) {
      statusDiv.innerText = "AI 正在解析...";
      try {
        const response = await fetch('https://api.openai.com/v1/chat/completions', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer YOUR_OPENAI_API_KEY` // 替换为你的 OpenAI API Key
          },
          body: JSON.stringify({
            model: "gpt-4",
            messages: [
              { "role": "system", "content": "你是一个帮助解析OCR文字的助手，返回正确答案的序号。" },
              { "role": "user", "content": `解析以下文字并返回答案序号：${text}` }
            ]
          }),
        });
        const result = await response.json();
        const aiResponse = result.choices[0].message.content.trim();
        console.log("AI返回结果:", aiResponse);

        statusDiv.innerText = `答案序号：${aiResponse}`;
      } catch (error) {
        console.error('AI解析出错:', error);
        statusDiv.innerText = "AI处理失败！";
      }
    }

    // 启动或关闭摄像头
    cameraContainer.addEventListener('click', () => {
      if (!cameraOn) {
        // 启动摄像头
        cameraOn = true;
        cameraContainer.style.backgroundColor = 'green';
        cameraContainer.innerText = 'ON';
        video.style.display = 'block';
        statusDiv.style.display = 'block';
        initCamera();
        captureInterval = setInterval(captureFrame, 1000); // 每秒捕捉一帧
      } else {
        // 关闭摄像头
        cameraOn = false;
        cameraContainer.style.backgroundColor = 'red';
        cameraContainer.innerText = 'OFF';
        video.style.display = 'none';
        statusDiv.style.display = 'none';
        clearInterval(captureInterval);
        const stream = video.srcObject;
        if (stream) {
          const tracks = stream.getTracks();
          tracks.forEach(track => track.stop()); // 停止所有轨道
        }
        video.srcObject = null;
      }
    });
  </script>
</body>
</html>
